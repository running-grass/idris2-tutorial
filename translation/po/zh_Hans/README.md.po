# Chinese translations for idris package
# Copyright (C) 2022 Free Software Foundation, Inc.
# This file is distributed under the same license as the idris package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: idris 2-tutorial\n"
"POT-Creation-Date: 2022-08-02 23:16+0800\n"
"PO-Revision-Date: 2022-08-03 01:49+0000\n"
"Last-Translator: admin <467195537@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://weblate.grass.work:30443/"
"projects/idris2-tutorial/readme/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.13.1\n"

#. type: Plain text
#: ../README.md:2
#, no-wrap
msgid "> [Chinese Translation](translation/README.md)\n"
msgstr "> 这里是中文版！\n"

#. type: Title #
#: ../README.md:3
#, no-wrap
msgid "Functional Programming in Idris 2"
msgstr "Idris 2 中的函数式编程"

#. type: Plain text
#: ../README.md:9
msgid ""
"The goal of this project is quickly explained: To become a more or less "
"comprehensive guide to the Idris programming language, with a lot of "
"introductory material targeted at newcomers to functional programming."
msgstr ""
"这个项目的目标是：要成为 Idris 编程语言的全面指南，其中包含大量针对函数式编程"
"新手的介绍性材料。"

#. type: Plain text
#: ../README.md:17
msgid ""
"The content will be organized in several parts, with the part about the core "
"language features being the main guide to functional programming in Idris. "
"Every part consists of several chapters, each trying to cover in depth a "
"certain aspect of the Idris programming language and its core libraries. "
"Most chapters come with (sometimes lots of) exercises, with solutions "
"available in directory `src/Solutions`."
msgstr ""
"内容将分为几个部分，其中关于核心语言特性的部分是 Idris 函数式编程主要指南。每"
"个部分都由几个章节组成，每个章节都试图深入介绍 Idris 编程语言及其核心库的某个"
"方面。大多数章节都附带（有时很多）练习，在目录 `src/Solutions` 中提供了解决方"
"案。"

#. type: Plain text
#: ../README.md:22
msgid ""
"Right now, even the part about core language features is not yet finished, "
"but is being actively developed and tried on several of my own students, "
"some of which are completely new to functional programming."
msgstr ""
"目前，甚至关于核心语言特性的部分还没有完成，但正在积极开发并在我自己的几个学"
"生身上进行尝试，其中一些对函数式编程来说是纯萌新。"

#. type: Title ##
#: ../README.md:23
#, no-wrap
msgid "Table of Contents"
msgstr "目录"

#. type: Title ###
#: ../README.md:25
#, no-wrap
msgid "Part 1: Core Language Features"
msgstr "第 1 部分：核心语言功能"

#. type: Plain text
#: ../README.md:31
msgid ""
"This part tries to give a solid introduction to the Idris programming "
"language. If you are new to functional programming, make sure to follow "
"these chapters in order and *solve all the exercises*."
msgstr ""
"这部分试图对 Idris 编程语言进行深入的介绍。如果您是函数式编程的新手，请确保按"
"顺序阅读这些章节并*解决所有练习*。"

#. type: Plain text
#: ../README.md:36
msgid ""
"If you already used other pure functional programming languages like "
"Haskell, you might go through the introductory material (Functions Part 1, "
"Algebraic Data Types, and Interfaces) pretty quickly, as most of this stuff "
"will already be familiar to you."
msgstr ""
"如果您已经使用过其他纯函数式编程语言，例如 Haskell，那么您可能会很快完成介绍"
"性材料（函数第 1 部分，代数数据类型和接口），因为这些内容中的大部分内容您已经"
"很熟悉了。"

#. type: Plain text
#: ../README.md:105
#, no-wrap
msgid ""
"1. [Introduction](src/Tutorial/Intro.md)\n"
"   1. [About the Idris Programming Language](src/Tutorial/Intro.md#about-the-idris-programming-language)\n"
"   2. [Using the REPL](src/Tutorial/Intro.md#using-the-repl)\n"
"   3. [A First Idris Program](src/Tutorial/Intro.md#a-first-idris-program)\n"
"   4. [The Shape of an Idris Definition](src/Tutorial/Intro.md#the-shape-of-an-idris-definition)\n"
"   5. [Where to get Help](src/Tutorial/Intro.md#where-to-get-help)\n"
"2. [Functions Part 1](src/Tutorial/Functions1.md)\n"
"   1. [Functions with more that one Argument](src/Tutorial/Functions1.md#functions-with-more-that-one-argument)\n"
"   2. [Function Composition](src/Tutorial/Functions1.md#function-composition)\n"
"   3. [Higher-order Functions](src/Tutorial/Functions1.md#higher-order-functions)\n"
"   4. [Currying](src/Tutorial/Functions1.md#currying)\n"
"   5. [Anonymous Functions](src/Tutorial/Functions1.md#anonymous-functions)\n"
"   6. [Operators](src/Tutorial/Functions1.md#operators)\n"
"3. [Algebraic Data Types](src/Tutorial/DataTypes.md)\n"
"   1. [Enumerations](src/Tutorial/DataTypes.md#enumerations)\n"
"   2. [Sum Types](src/Tutorial/DataTypes.md#sum-types)\n"
"   3. [Records](src/Tutorial/DataTypes.md#records)\n"
"   4. [Generic Data Types](src/Tutorial/DataTypes.md#generic-data-types)\n"
"   5. [Alternative Syntax for Data Definitions](src/Tutorial/DataTypes.md#alternative-syntax-for-data-definitions)\n"
"4. [Interfaces](src/Tutorial/Interfaces.md)\n"
"   1. [Interface Basics](src/Tutorial/Interfaces.md#interface-basics)\n"
"   2. [More about Interfaces](src/Tutorial/Interfaces.md#more-about-interfaces)\n"
"   3. [Interfaces in the Prelude](src/Tutorial/Interfaces.md#interfaces-in-the-prelude)\n"
"5. [Functions Part 2](src/Tutorial/Functions2.md)\n"
"   1. [Let Bindings and Local Definitions](src/Tutorial/Functions2.md#let-bindings-and-local-definitions)\n"
"   2. [The Truth about Function Arguments](src/Tutorial/Functions2.md#the-truth-about-function-arguments)\n"
"   3. [Programming with Holes](src/Tutorial/Functions2.md#programming-with-holes)\n"
"6. [Dependent Types](src/Tutorial/Dependent.md)\n"
"   1. [Length-Indexed Lists](src/Tutorial/Dependent.md#length-indexed-lists)\n"
"   2. [Fin: Safe Indexing into Vectors](src/Tutorial/Dependent.md#fin-safe-indexing-into-vectors)\n"
"   3. [Compile-Time Computations](src/Tutorial/Dependent.md#compile-time-computations)\n"
"7. [IO: Programming with Side Effects](src/Tutorial/IO.md)\n"
"   1. [Pure Side Effects?](src/Tutorial/IO.md#pure-side-effects)\n"
"   2. [Do Blocks, Desugared](src/Tutorial/IO.md#do-blocks-desugared)\n"
"   3. [Working with Files](src/Tutorial/IO.md#working-with-files)\n"
"   4. [How IO is Implemented](src/Tutorial/IO.md#how-io-is-implemented)\n"
"8. [Functor and Friends](src/Tutorial/Functor.md)\n"
"   1. [Functor](src/Tutorial/Functor.md#functor)\n"
"   2. [Applicative](src/Tutorial/Functor.md#applicative)\n"
"   3. [Monad](src/Tutorial/Functor.md#monad)\n"
"   4. [Background and further Reading](src/Tutorial/Functor.md#background-and-further-reading)\n"
"9. [Recursion and Folds](src/Tutorial/Folds.md)\n"
"   1. [Recursion](src/Tutorial/Folds.md#recursion)\n"
"   2. [A few Notes on Totality Checking](src/Tutorial/Folds.md#a-few-notes-on-totality-checking)\n"
"   3. [Interface Foldable](src/Tutorial/Folds.md#interface-foldable)\n"
"10. [Effectful Traversals](src/Tutorial/Traverse.md)\n"
"    1. [Reading CSV Tables](src/Tutorial/Traverse.md#reading-csv-tables)\n"
"    2. [Programming with State](src/Tutorial/Traverse.md#programming-with-state)\n"
"    3. [The Power of Composition](src/Tutorial/Traverse.md#the-power-of-composition)\n"
"11. [Sigma Types](src/Tutorial/DPair.md)\n"
"    1. [Dependent Pairs](src/Tutorial/DPair.md#dependent-pairs)\n"
"    2. [Use Case: Nucleic Acids](src/Tutorial/DPair.md#use-case-nucleic-acids)\n"
"    3. [Use Case: CSV Files with a Schema](src/Tutorial/DPair.md#use-case-csv-files-with-a-schema)\n"
"12. [Propositional Equality](src/Tutorial/Eq.md)\n"
"    1. [Equality as a Type](src/Tutorial/Eq.md#equality-as-a-type)\n"
"    2. [Programs as Proofs](src/Tutorial/Eq.md#programs-as-proofs)\n"
"    3. [Into the Void](src/Tutorial/Eq.md#into-the-void)\n"
"    4. [Rewrite Rules](src/Tutorial/Eq.md#rewrite-rules)\n"
"13. [Predicates and Proof Search](src/Tutorial/Predicates.md)\n"
"    1. [Preconditions](src/Tutorial/Predicates.md#preconditions)\n"
"    2. [Contracts between Values](src/Tutorial/Predicates.md#contracts-between-values)\n"
"    3. [Use Case: Flexible Error Handling](src/Tutorial/Predicates.md#use-case-flexible-error-handling)\n"
"    4. [The Truth about Interfaces](src/Tutorial/Predicates.md#the-truth-about-interfaces)\n"
"14. [Primitives](src/Tutorial/Prim.md)\n"
"    1. [How Primitives are Implemented](src/Tutorial/Prim.md#how-primitives-are-implemented)\n"
"    2. [Working with Strings](src/Tutorial/Prim.md#working-with-strings)\n"
"    3. [Integers](src/Tutorial/Prim.md#integers)\n"
"    4. [Refined Primitives](src/Tutorial/Prim.md#refined-primitives)\n"
msgstr ""
"1. [简介](src/Tutorial/Intro.md)\n"
"   1. [关于Idris编程语言](src/Tutorial/Intro.md#about-the-idris-programming-"
"language)\n"
"   2. [使用 REPL](src/Tutorial/Intro.md#using-the-repl)\n"
"   3. [第一个 Idris 程序](src/Tutorial/Intro.md#a-first-idris-program)\n"
"   4. [一个 Idris 定义应该的样子](src/Tutorial/Intro.md#the-shape-of-an-"
"idris-definition)\n"
"   5. [在哪里可以获得帮助](src/Tutorial/Intro.md#where-to-get-help)\n"
"2. [函数第1部分](src/Tutorial/Functions1.md)\n"
"   1. [具有多个参数的函数](src/Tutorial/Functions1.md#functions-with-more-"
"that-one-argument)\n"
"   2. [函数组合](src/Tutorial/Functions1.md#function-composition)\n"
"   3. [高阶函数](src/Tutorial/Functions1.md#higher-order-functions)\n"
"   4. [柯里化](src/Tutorial/Functions1.md#currying)\n"
"   5. [匿名函数](src/Tutorial/Functions1.md#anonymous-functions)\n"
"   6. [运算符](src/Tutorial/Functions1.md#operators)\n"
"3. [代数数据类型](src/Tutorial/DataTypes.md)\n"
"   1. [枚举](src/Tutorial/DataTypes.md#enumerations)\n"
"   2. [和类型](src/Tutorial/DataTypes.md#sum-types)\n"
"   3. [记录](src/Tutorial/DataTypes.md#records)\n"
"   4. [通用数据类型](src/Tutorial/DataTypes.md#generic-data-types)\n"
"   5. [数据定义的替代语法](src/Tutorial/DataTypes.md#alternative-syntax-for-"
"data-definitions)\n"
"4. [接口](src/Tutorial/Interfaces.md)\n"
"   1. [接口基础](src/Tutorial/Interfaces.md#interface-basics)\n"
"   2. [更多关于接口](src/Tutorial/Interfaces.md#more-about-interfaces)\n"
"   3. [Prelude 中的接口](src/Tutorial/Interfaces.md#interfaces-in-the-"
"prelude)\n"
"5. [函数第二部分](src/Tutorial/Functions2.md)\n"
"   1. [绑定和局部定义](src/Tutorial/Functions2.md#let-bindings-and-local-"
"definitions)\n"
"   2. [函数参数的真相](src/Tutorial/Functions2.md#the-truth-about-function-"
"arguments)\n"
"   3. [使用孔进行编程](src/Tutorial/Functions2.md#programming-with-holes)\n"
"6. [依赖类型](src/Tutorial/Dependent.md)\n"
"   1. [长度索引列表](src/Tutorial/Dependent.md#length-indexed-lists)\n"
"   2. [Fin：向量的安全索引](src/Tutorial/Dependent.md#fin-safe-indexing-into-"
"vectors)\n"
"   3. [编译期计算](src/Tutorial/Dependent.md#compile-time-computations)\n"
"7. [IO：有副作用的编程](src/Tutorial/IO.md)\n"
"   1. [纯副作用？](src/Tutorial/IO.md#pure-side-effects)\n"
"   2. [Do 程序块, 脱糖](src/Tutorial/IO.md#do-blocks-desugared)\n"
"   3. [操作文件](src/Tutorial/IO.md#working-with-files)\n"
"   4. [IO是如何实现的](src/Tutorial/IO.md#how-io-is-implemented)\n"
"8. [函子和它的小朋友们](src/Tutorial/Functor.md)\n"
"   1. [函子](src/Tutorial/Functor.md#functor)\n"
"   2. [应用子](src/Tutorial/Functor.md#applicative)\n"
"   3. [单子](src/Tutorial/Functor.md#monad)\n"
"   4. [背景与延伸阅读](src/Tutorial/Functor.md#background-and-further-"
"reading)\n"
"9. [递归与折叠](src/Tutorial/Folds.md)\n"
"   1. [递归](src/Tutorial/Folds.md#recursion)\n"
"   2. [关于完全性检查的几点说明](src/Tutorial/Folds.md#a-few-notes-on-"
"totality-checking)\n"
"   3. [foldable 接口](src/Tutorial/Folds.md#interface-foldable)\n"
"10. [遍历副作用](src/Tutorial/Traverse.md)\n"
"    1. [读取CSV表格](src/Tutorial/Traverse.md#reading-csv-tables)\n"
"    2. [有状态编程](src/Tutorial/Traverse.md#programming-with-state)\n"
"    3. [组合的力量](src/Tutorial/Traverse.md#the-power-of-composition)\n"
"11. [Sigma 类型](src/Tutorial/DPair.md)\n"
"    1. [依赖对](src/Tutorial/DPair.md#dependent-pairs)\n"
"    2. [用例：核酸](src/Tutorial/DPair.md#use-case-nucleic-acids)\n"
"    3. [用例：带有 Schema 的 CSV 文件](src/Tutorial/DPair.md#use-case-csv-"
"files-with-a-schema)\n"
"12. [命题等式](src/Tutorial/Eq.md)\n"
"    1. [作为类型的相等性](src/Tutorial/Eq.md#equality-as-a-type)\n"
"    2. [程序作为证明](src/Tutorial/Eq.md#programs-as-proofs)\n"
"    3. [遁入虚无](src/Tutorial/Eq.md#into-the-void)\n"
"    4. [重写规则](src/Tutorial/Eq.md#rewrite-rules)\n"
"13. [谓词和证明搜索](src/Tutorial/Predicates.md)\n"
"    1. [前置条件](src/Tutorial/Predicates.md#preconditions)\n"
"    2. [值之间的契约](src/Tutorial/Predicates.md#contracts-between-values)\n"
"    3. [用例：灵活的错误处理](src/Tutorial/Predicates.md#use-case-flexible-"
"error-handling)\n"
"    4. [接口的真相](src/Tutorial/Predicates.md#the-truth-about-interfaces)\n"
"14. [原语](src/Tutorial/Prim.md)\n"
"    1. [原语是如何实现的](src/Tutorial/Prim.md#how-primitives-are-"
"implemented)\n"
"    2. [使用字符串](src/Tutorial/Prim.md#working-with-strings)\n"
"    3. [整数](src/Tutorial/Prim.md#integers)\n"
"    4. [改进原语](src/Tutorial/Prim.md#refined-primitives)\n"

#. type: Title ###
#: ../README.md:106
#, no-wrap
msgid "Part 2: Appendices"
msgstr "第 2 部分：附录"

#. type: Plain text
#: ../README.md:112
msgid ""
"The appendices can be used as references for the topics at hand. I plan to "
"eventually have a concise reference on Idris syntax, typical error messages, "
"the module system, interactive editing and possibly others."
msgstr ""
"附录可用作手头主题的参考。我计划最终对 Idris 语法、典型错误消息、模块系统、交"
"互式编辑以及可能的其他内容有一个简明的参考。"

#. type: Bullet: '1. '
#: ../README.md:114
msgid "[Interactive Editing in Neovim](src/Appendices/Neovim.md)"
msgstr "[Neovim 中的交互式编辑](src/Appendices/Neovim.md)"

#. type: Title ##
#: ../README.md:115
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: ../README.md:121
msgid ""
"At the moment, this project is being actively developed and evolved against "
"the main branch of the Idris 2 repository.  It is being tested nightly on "
"GitHub and built against the latest commit of the Idris 2 main branch as "
"well as the Idris 2 commit listed in file `.idris-version`."
msgstr ""
"目前，该项目正在针对 Idris 2 存储库的主要分支进行积极开发和演进。它每晚在 "
"GitHub 上进行测试，并针对 Idris 2 主分支的最新提交以及文件 `.idris-version` "
"中列出的 Idris 2 提交进行构建。"
