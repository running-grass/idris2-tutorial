# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-02 13:07+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../README.md:2
msgid "# Functional Programming in Idris 2"
msgstr ""

#. type: Plain text
#: ../README.md:7
msgid ""
"The goal of this project is quickly explained: To become a more or less "
"comprehensive guide to the Idris programming language, with a lot of "
"introductory material targeted at newcomers to functional programming."
msgstr ""

#. type: Plain text
#: ../README.md:15
msgid ""
"The content will be organized in several parts, with the part about the core "
"language features being the main guide to functional programming in Idris. "
"Every part consists of several chapters, each trying to cover in depth a "
"certain aspect of the Idris programming language and its core libraries. "
"Most chapters come with (sometimes lots of) exercises, with solutions "
"available in directory `src/Solutions`."
msgstr ""

#. type: Plain text
#: ../README.md:20
msgid ""
"Right now, even the part about core language features is not yet finished, "
"but is being actively developed and tried on several of my own students, "
"some of which are completely new to functional programming."
msgstr ""

#. type: Plain text
#: ../README.md:22
msgid "## Table of Contents"
msgstr ""

#. type: Plain text
#: ../README.md:24
msgid "### Part 1: Core Language Features"
msgstr ""

#. type: Plain text
#: ../README.md:29
msgid ""
"This part tries to give a solid introduction to the Idris programming "
"language. If you are new to functional programming, make sure to follow "
"these chapters in order and *solve all the exercises*."
msgstr ""

#. type: Plain text
#: ../README.md:34
msgid ""
"If you already used other pure functional programming languages like "
"Haskell, you might go through the introductory material (Functions Part 1, "
"Algebraic Data Types, and Interfaces) pretty quickly, as most of this stuff "
"will already be familiar to you."
msgstr ""

#. type: Plain text
#: ../README.md:103
#, no-wrap
msgid ""
"1. [Introduction](src/Tutorial/Intro.md)\n"
"   1. [About the Idris Programming Language](src/Tutorial/Intro.md#about-the-idris-programming-language)\n"
"   2. [Using the REPL](src/Tutorial/Intro.md#using-the-repl)\n"
"   3. [A First Idris Program](src/Tutorial/Intro.md#a-first-idris-program)\n"
"   4. [The Shape of an Idris Definition](src/Tutorial/Intro.md#the-shape-of-an-idris-definition)\n"
"   5. [Where to get Help](src/Tutorial/Intro.md#where-to-get-help)\n"
"2. [Functions Part 1](src/Tutorial/Functions1.md)\n"
"   1. [Functions with more that one Argument](src/Tutorial/Functions1.md#functions-with-more-that-one-argument)\n"
"   2. [Function Composition](src/Tutorial/Functions1.md#function-composition)\n"
"   3. [Higher-order Functions](src/Tutorial/Functions1.md#higher-order-functions)\n"
"   4. [Currying](src/Tutorial/Functions1.md#currying)\n"
"   5. [Anonymous Functions](src/Tutorial/Functions1.md#anonymous-functions)\n"
"   6. [Operators](src/Tutorial/Functions1.md#operators)\n"
"3. [Algebraic Data Types](src/Tutorial/DataTypes.md)\n"
"   1. [Enumerations](src/Tutorial/DataTypes.md#enumerations)\n"
"   2. [Sum Types](src/Tutorial/DataTypes.md#sum-types)\n"
"   3. [Records](src/Tutorial/DataTypes.md#records)\n"
"   4. [Generic Data Types](src/Tutorial/DataTypes.md#generic-data-types)\n"
"   5. [Alternative Syntax for Data Definitions](src/Tutorial/DataTypes.md#alternative-syntax-for-data-definitions)\n"
"4. [Interfaces](src/Tutorial/Interfaces.md)\n"
"   1. [Interface Basics](src/Tutorial/Interfaces.md#interface-basics)\n"
"   2. [More about Interfaces](src/Tutorial/Interfaces.md#more-about-interfaces)\n"
"   3. [Interfaces in the Prelude](src/Tutorial/Interfaces.md#interfaces-in-the-prelude)\n"
"5. [Functions Part 2](src/Tutorial/Functions2.md)\n"
"   1. [Let Bindings and Local Definitions](src/Tutorial/Functions2.md#let-bindings-and-local-definitions)\n"
"   2. [The Truth about Function Arguments](src/Tutorial/Functions2.md#the-truth-about-function-arguments)\n"
"   3. [Programming with Holes](src/Tutorial/Functions2.md#programming-with-holes)\n"
"6. [Dependent Types](src/Tutorial/Dependent.md)\n"
"   1. [Length-Indexed Lists](src/Tutorial/Dependent.md#length-indexed-lists)\n"
"   2. [Fin: Safe Indexing into Vectors](src/Tutorial/Dependent.md#fin-safe-indexing-into-vectors)\n"
"   3. [Compile-Time Computations](src/Tutorial/Dependent.md#compile-time-computations)\n"
"7. [IO: Programming with Side Effects](src/Tutorial/IO.md)\n"
"   1. [Pure Side Effects?](src/Tutorial/IO.md#pure-side-effects)\n"
"   2. [Do Blocks, Desugared](src/Tutorial/IO.md#do-blocks-desugared)\n"
"   3. [Working with Files](src/Tutorial/IO.md#working-with-files)\n"
"   4. [How IO is Implemented](src/Tutorial/IO.md#how-io-is-implemented)\n"
"8. [Functor and Friends](src/Tutorial/Functor.md)\n"
"   1. [Functor](src/Tutorial/Functor.md#functor)\n"
"   2. [Applicative](src/Tutorial/Functor.md#applicative)\n"
"   3. [Monad](src/Tutorial/Functor.md#monad)\n"
"   4. [Background and further Reading](src/Tutorial/Functor.md#background-and-further-reading)\n"
"9. [Recursion and Folds](src/Tutorial/Folds.md)\n"
"   1. [Recursion](src/Tutorial/Folds.md#recursion)\n"
"   2. [A few Notes on Totality Checking](src/Tutorial/Folds.md#a-few-notes-on-totality-checking)\n"
"   3. [Interface Foldable](src/Tutorial/Folds.md#interface-foldable)\n"
"10. [Effectful Traversals](src/Tutorial/Traverse.md)\n"
"    1. [Reading CSV Tables](src/Tutorial/Traverse.md#reading-csv-tables)\n"
"    2. [Programming with State](src/Tutorial/Traverse.md#programming-with-state)\n"
"    3. [The Power of Composition](src/Tutorial/Traverse.md#the-power-of-composition)\n"
"11. [Sigma Types](src/Tutorial/DPair.md)\n"
"    1. [Dependent Pairs](src/Tutorial/DPair.md#dependent-pairs)\n"
"    2. [Use Case: Nucleic Acids](src/Tutorial/DPair.md#use-case-nucleic-acids)\n"
"    3. [Use Case: CSV Files with a Schema](src/Tutorial/DPair.md#use-case-csv-files-with-a-schema)\n"
"12. [Propositional Equality](src/Tutorial/Eq.md)\n"
"    1. [Equality as a Type](src/Tutorial/Eq.md#equality-as-a-type)\n"
"    2. [Programs as Proofs](src/Tutorial/Eq.md#programs-as-proofs)\n"
"    3. [Into the Void](src/Tutorial/Eq.md#into-the-void)\n"
"    4. [Rewrite Rules](src/Tutorial/Eq.md#rewrite-rules)\n"
"13. [Predicates and Proof Search](src/Tutorial/Predicates.md)\n"
"    1. [Preconditions](src/Tutorial/Predicates.md#preconditions)\n"
"    2. [Contracts between Values](src/Tutorial/Predicates.md#contracts-between-values)\n"
"    3. [Use Case: Flexible Error Handling](src/Tutorial/Predicates.md#use-case-flexible-error-handling)\n"
"    4. [The Truth about Interfaces](src/Tutorial/Predicates.md#the-truth-about-interfaces)\n"
"14. [Primitives](src/Tutorial/Prim.md)\n"
"    1. [How Primitives are Implemented](src/Tutorial/Prim.md#how-primitives-are-implemented)\n"
"    2. [Working with Strings](src/Tutorial/Prim.md#working-with-strings)\n"
"    3. [Integers](src/Tutorial/Prim.md#integers)\n"
"    4. [Refined Primitives](src/Tutorial/Prim.md#refined-primitives)\n"
msgstr ""

#. type: Plain text
#: ../README.md:105
msgid "### Part 2: Appendices"
msgstr ""

#. type: Plain text
#: ../README.md:110
msgid ""
"The appendices can be used as references for the topics at hand. I plan to "
"eventually have a concise reference on Idris syntax, typical error messages, "
"the module system, interactive editing and possibly others."
msgstr ""

#. type: Bullet: '1. '
#: ../README.md:112
msgid "[Interactive Editing in Neovim](src/Appendices/Neovim.md)"
msgstr ""

#. type: Plain text
#: ../README.md:114
msgid "## Prerequisites"
msgstr ""

#. type: Plain text
#: ../README.md:119
msgid ""
"At the moment, this project is being actively developed and evolved against "
"the main branch of the Idris 2 repository.  It is being tested nightly on "
"GitHub and built against the latest commit of the Idris 2 main branch as "
"well as the Idris 2 commit listed in file `.idris-version`."
msgstr ""
